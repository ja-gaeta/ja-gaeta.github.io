<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ponto G++.</title>
    <link>http://ja-gaeta.github.io/</link>
    <atom:link href="http://ja-gaeta.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>For future use?</description>
    <language>en</language>
    <pubDate>Dom, 8 mar 2015 11:39:51 -0300</pubDate>
    <lastBuildDate>Dom, 8 mar 2015 11:39:51 -0300</lastBuildDate>

      <item>
        <title>Curso de Java - Aula 2</title>
        <link>http://ja-gaeta.github.io2014/curso-de-java-aula-002.html</link>
        <pubDate>Sáb, 22 nov 2014 00:00:00 -0200</pubDate>
        <guid isPermaLink="false">2014/curso-de-java-aula-002.html</guid>
        <description>
	        &lt;p style=&quot;text-align: center;&quot;&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/o2pTdOdKC5Y&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Introdução&lt;/h2&gt;&lt;p&gt;Na segunda aula do Curso de Java, começamos, como se costuma dizer, a colocar a mão na massa! Hora de codificar nosso primeiro programa em Java: o famoso &lt;em&gt;HelloWorld&lt;/em&gt;, versão tupiniquim.&lt;/p&gt;&lt;p&gt;Mostramos como é feita a compilação e execução de um programa Java através da linha de comando do Windows (ou terminal, no Mac e Linux), dissecamos os comentários em Java, analisamos os problemas de acentuação (não só em Java) e a codificação UTF-8 e, para encerrar, falamos sobre os erros que podem ocorrer durante a compilação e/ou execução de um programa.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;Programa da aula:&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;&gt;&lt;a href=&quot;#header0&quot;&gt;Sintaxe básica da linguagem:&lt;/a&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;#header1&quot;&gt;&quot;&lt;em&gt;HelloWorld&lt;/em&gt;&quot;, ou &quot;OlaMundo&quot;, na versão &quot;tupiniquim&quot;.&lt;/a&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;#header2&quot;&gt;Comentários em Java.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header3&quot;&gt;(Quase) tudo em Java é uma classe.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header4&quot;&gt;Palavras-reservadas, modificadores e chaves.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header5&quot;&gt;O método main()&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header6&quot;&gt;O método println()&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header7&quot;&gt;Edição do Código-Fonte.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header8&quot;&gt;Compilação.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header9&quot;&gt;Execução em &lt;em&gt;linha de comando&lt;/em&gt;.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header10&quot;&gt;Caracteres Unicode.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header11&quot;&gt;Erros de compilação.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header12&quot;&gt;Erros de execução.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;header0&quot;&gt;Sintaxe Básica&lt;/h2&gt;&lt;p&gt;Uma das razões do grande sucesso da linguagem de programação Java foi, sem sombra de dúvida, adotar uma sintaxe quase idêntica à das linguagens C/C++, que já contavam naquela época com uma ampla e sólida base de programadores, os quais puderam, assim, aprender as particularidades da nova linguagem com muita facilidade, atingindo rapidamente uma alta produtividade.&lt;/p&gt;&lt;p&gt;Os criadores da linguagem Java, contudo, não se preocuparam apenas em dar-lhe uma sintaxe de aparência familiar, mas também, desde o início, estabeleceram regras para a redação do código, de forma a torná-lo compreensível e de fácil manutenção. Tais convenções, de fato, induzem bons hábitos de programação e, por essa razão, Java tem sido cada vez mais adotada nas escolas, de todos os níveis, para o ensino de programação.&lt;/p&gt;
&lt;h3 id=&quot;header1&quot;&gt;Nosso primeiro programa: &quot;OlaMundo.java&quot;&lt;/h3&gt;&lt;p&gt;Já é uma tradição, para fazer uma rápida apresentação de qualquer linguagem, escrever um pequeno programa que contenha sua sintaxe básica, o qual, normalmente, consiste em exibir a mensagem &quot;Hello world!&quot; (Olá mundo!) no console ou terminal do computador.&lt;/p&gt;&lt;p&gt;Não vamos fugir à regra. Abaixo, está o código do programa &lt;code&gt;HelloWorld&lt;/code&gt;, adaptado para a nossa versão tupiniquim, com o nome &lt;code&gt;OlaMundo&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;brush: java, highlight: [1, 3, 5, 7, 9, 11], toolbar: false&quot;&gt;
/* OlaMundo em Java */

public class OlaMundo {

	public static void main(String[] args) {

		System.out.println(&quot;Olá mundão velho!&quot;); // exibe mensagem

	}

}
&lt;/pre&gt;&lt;p&gt;Vamos analisar os componentes desse pequeno programa e vocês já vão entender porque eu disse que as convenções da linguagem Java induzem boas práticas de programação.&lt;/p&gt;
&lt;h3 id=&quot;header2&quot;&gt;Comentários em Java&lt;/h3&gt;&lt;p&gt;Na linha 1 acima, encontramos um comentário, ou seja, um texto que serve apenas como referência para o programador entender a finalidade do programa ou explicar determinado trecho do código. Fazem parte do que denominamos &lt;span style=&quot;color: #ff6600;&quot;&gt;metadados&lt;/span&gt;, ou seja, informações inseridas no código a respeito dele próprio.&lt;/p&gt;&lt;p&gt;Esta sintaxe para comentários é exatamente idêntica à da linguagem C, também disponível em C++, começando sempre com o conjunto de caracteres &lt;code&gt;/*&lt;/code&gt; e terminando com o conjunto &lt;code&gt;*/&lt;/code&gt;. Tudo o que for escrito entre esses dois conjuntos será desconsiderado pelo compilador na geração do &lt;em&gt;bytecode&lt;/em&gt;. Esta fórmula permite a inserção de comentários de diversas linhas, de forma bastante prática. Alguns costumam &quot;emoldurar&quot; o texto do comentário, de forma a destacá-lo mais no corpo do código, como a seguir:&lt;/p&gt;
&lt;pre class=&quot;brush: java, toolbar: false&quot;&gt;
/*===================================================
* Programa: Loterias.java                           *
* Autor: Fulano de Tal                              *
* Data: 25/12/2014                                  *
====================================================*/
&lt;/pre&gt;&lt;p&gt;Esta é uma forma perfeitamente válida de comentário multilinhas em Java. Observe que ele inicia com o conjunto &lt;code&gt;/*&lt;/code&gt; e termina com o conjunto &lt;code&gt;*/&lt;/code&gt;, como determina a sintaxe da linguagem.&lt;/p&gt;&lt;p&gt;Outra forma de escrever comentários é precedendo-os do conjunto &lt;code&gt;//&lt;/code&gt;, o que também é muito usual em C++. Você encontra um exemplo deste tipo de comentário no final da linha 7 no nosso programinha &quot;OlaMundo&quot; acima.&lt;/p&gt;&lt;p&gt;A grande diferença deste tipo de comentário em relação ao primeiro que examinamos (&lt;code&gt;/* ... */&lt;/code&gt;), é que ele não permite múltiplas linhas de comentário como o anterior. Isso é óbvio, pois possui apenas um conjunto de caracteres inicial, mas é bastante prático para comentar linhas de código, bem como para excluir temporariamente determinada linha ou trecho de linha para algum teste que precisemos fazer.&lt;/p&gt;&lt;p&gt;Na linguagem Java existe um terceiro tipo de comentário, peculiar a ela, ou seja, não é encontrada em C/C++. Ele também permite comentar múltiplas linhas e sua sintaxe é quase igual à do comentário multilinhas normal. A diferença é que possui um asterisco (*) a mais no conjunto de abertura, isto é, começa com &lt;code&gt;/**&lt;/code&gt; e termina com &lt;code&gt;*/&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Sendo Java uma linguagem orientada a objetos, uma de suas características marcantes é a possibilidade de reutilização do código das classes criadas. Para isso, evidentemente, é preciso que o código esteja muito bem documentado, descrevendo todas as peculiaridades das classes, seus parâmetros, métodos, etc.&lt;/p&gt;&lt;p&gt;É exatamente aí que entra em cena a ferramenta&lt;span style=&quot;color: #808080;&quot;&gt;&lt;strong&gt; JavaDoc&lt;/strong&gt;&lt;/span&gt;, incluída na instalação do JDK, que facilita todo o trabalho de criação e manipulação dos comentários.&lt;/p&gt;&lt;p&gt;Nós vamos dedicar um aula especial para estudar JavaDoc, mas para que você já faça uma ideia do seu funcionamento, ele opera através da marcação de documentos, gerando arquivos nos formatos HTML, SGML, XML ou RTF. Veja, a seguir, um exemplo de comentário JavaDoc, destacando-se as &lt;em&gt;tags&lt;/em&gt; iniciadas com &lt;code&gt;@&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;brush: java; toolbar: false&quot;&gt;
/** Classe para objetos tipo Servidor, contendo seus valores e metodos
 *  @author J. A. Gaeta Mendes
 *  @version 2.35
 */
&lt;/pre&gt;
&lt;h3 id=&quot;header3&quot;&gt;(Quase) tudo em Java é uma classe&lt;/h3&gt;&lt;p&gt;Continuando com a análise do nosso programa de apresentação, encontramos na linha 3 o início do código propriamente dito, ou seja, aquele que será efetivamente compilado no &lt;em&gt;bytecode&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;brush: java, first-line: 3, toolbar: false&quot;&gt;
public class OlaMundo {
&lt;/pre&gt;&lt;p&gt;Como já mencionamos diversas vezes, Java é uma linguagem quase totalmente orientada a objetos. De fato, tirando os tipos primitivos, tudo em Java é uma classe que, como veremos mais tarde, são as &quot;plantas&quot; ou &quot;esquemas&quot; para a criação de objetos. Assim, todo o programa em Java é composto ao menos por uma classe.&lt;/p&gt;&lt;p&gt;Demos à classe deste nosso primeiro programa o sugestivo nome &lt;code&gt;OlaMundo&lt;/code&gt;. Os nomes dados às classes, bem como às variáveis que veremos adiante, são tecnicamente denominados identificadores.&lt;/p&gt;&lt;p&gt;Observem com cuidado a forma como o identificador foi escrito: começa com letra maiúscula, sempre que for nome de classe. Como não são permitidos espaços entre palavras nos identificadores, quando eles são compostos de mais de uma palavra, como no nosso caso, usa-se uma forma chamada em inglês &quot;&lt;em&gt;CamelCase&lt;/em&gt;&quot;, que consiste em iniciar cada palavra com uma letra maiúscula, imitando as corcovas de um camelo, daí o nome. Estas convenções, como já disse, devem ser rigorosamente observadas, para facilitar a análise e manutenção do código. A medida em que seus programas forem ficando mais complexos e extensos, você vai entender a relevância disso.&lt;/p&gt;&lt;p&gt;Outra observação muito importante é que o nome do arquivo salvo no editor de textos deverá ser exatamente o mesmo daquele dado à classe, observando-se rigorosamente a caixa das letras, pois Java faz distinção entre maiúsculas e minúsculas, acrescentando-se a extensão &lt;code&gt;.java&lt;/code&gt; (no nosso caso, o nome do arquivo será &lt;code&gt;OlaMundo.java&lt;/code&gt;). Oficialmente, cada arquivo-fonte em Java é chamado &quot;Unidade de Compilação&quot;.&lt;/p&gt;
&lt;h3 id=&quot;header4&quot;&gt;Palavras-reservadas, modificadores e chaves&lt;/h3&gt;&lt;p&gt;Analisemos agora as duas palavrinhas que antecedem o identificador da classe. Uma delas, &lt;code&gt;class&lt;/code&gt;, é uma palavra reservada da linguagem, usada para declarar que uma nova classe está sendo definida. Existem 50 palavras reservadas na linguagem Java, conforme estudaremos adiante, sendo &lt;code&gt;class&lt;/code&gt; uma delas.&lt;/p&gt;&lt;p&gt;A outra é o modificador de acesso &lt;code&gt;public&lt;/code&gt;, mais uma palavra reservada, que permite ao programador controlar a visibilidade dos membros da classe. Quando um membro de uma classe é precedido da palavra &lt;code&gt;public&lt;/code&gt;, ele pode ser acessado por código externo à classe no qual ele é declarado. (O oposto de &lt;code&gt;public&lt;/code&gt; é &lt;code&gt;private&lt;/code&gt;, que impede que um membro seja usado por código externo à sua classe. Veremos isso com mais detalhes em aulas específicas).&lt;/p&gt;&lt;p&gt;Finalmente, observamos a abertura de uma chave (&lt;code&gt;{&lt;/code&gt;). Toda a definição da classe, inclusive de todos os seus membros, será entre a chave de abertura e fechamento (&lt;code&gt;{}&lt;/code&gt;). Por ora, não se preocupe muito com os detalhes da classe. Apenas observe que em Java, toda a atividade do programa ocorre dentro de uma delas.&lt;/p&gt;
&lt;h3 id=&quot;header5&quot;&gt;O método &lt;code&gt;main()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Passemos para a linha seguinte do programa:&lt;/p&gt;
&lt;pre class=&quot;brush: java, first-line: 5, toolbar: false&quot;&gt;
public static void main(String[] args) {
&lt;/pre&gt;&lt;p&gt;Esta linha inicia o método &lt;code&gt;main()&lt;/code&gt; e é nela que o programa começará a ser executado. Observe a chave de abertura para este novo bloco, que terá sua correspondente de fechamento na linha 9. Cada parte entre as chaves é denominado um bloco de código.&lt;/p&gt;&lt;p&gt;Todo aplicativo Java começa sua execução invocando o método &lt;code&gt;main()&lt;/code&gt;. O significado completo de cada uma de suas partes não pode ser explicado já, uma vez que exige um entendimento detalhado da forma como Java implementa o encapsulamento.&lt;/p&gt;&lt;p&gt;Todavia, como vamos usá-lo bastante desde o início do nosso curso, não custa dar uma rápida examinada em cada um dos seus componentes.&lt;/p&gt;&lt;p&gt;A primeira palavra, o modificador de acesso &lt;code&gt;public&lt;/code&gt;, já examinamos acima e, de fato, o método precisa ser assim definido, uma vez que será acessado por código externo quando o programa for executado.&lt;/p&gt;&lt;p&gt;A palavra reservada &lt;code&gt;static&lt;/code&gt; permite que &lt;code&gt;main()&lt;/code&gt; seja chamado sem necessidade de ser &lt;em&gt;instanciado&lt;/em&gt;. Instanciar, significa criar um objeto com base no &quot;esquema&quot; representado pela classe. Isso é necessário uma vez que &lt;code&gt;main()&lt;/code&gt; é invocado pela JVM (&lt;em&gt;Java Virtual Machine&lt;/em&gt;) antes que os objetos sejam criados.&lt;/p&gt;&lt;p&gt;A palavra reservada &lt;code&gt;void&lt;/code&gt; apenas informa o compilador que &lt;code&gt;main()&lt;/code&gt; não vai retornar nenhum valor. Como veremos mais tarde, os métodos também podem retornar valores.&lt;/p&gt;&lt;p&gt;Se tudo isso lhe pareceu meio confuso, não se preocupe porque, como já disse, iremos abordar tudo com detalhes em aulas posteriores.&lt;/p&gt;&lt;p&gt;Para passar informações a serem processadas pelo método, usam-se variáveis especificadas dentro dos parênteses que seguem o identificador que, no caso de métodos, devem sempre começar com letra minúscula, bem como os das variáveis.&lt;/p&gt;&lt;p&gt;Essas variáveis são denominadas &lt;span style=&quot;color: #ff6600;&quot;&gt;parâmetros&lt;/span&gt;. Mesmo que não sejam necessários parâmetros para o método, ainda assim deve ser incluído um conjunto de parênteses vazio. Embora o método &lt;code&gt;main()&lt;/code&gt; possua apenas um parâmetro, ele é bem complicadinho... Vamos destrinchá-lo!&lt;/p&gt;&lt;p&gt;&lt;code&gt;String[] args&lt;/code&gt; declara um parâmetro denominado &lt;code&gt;args&lt;/code&gt;, que é um &lt;em&gt;&lt;span style=&quot;color: #ff6600;&quot;&gt;array&lt;/span&gt;&lt;/em&gt; de instâncias da classe &lt;span style=&quot;color: #ff6600;&quot;&gt;&lt;em&gt;String&lt;/em&gt;&lt;/span&gt;. Iremos estudar os &lt;em&gt;arrays&lt;/em&gt; em aula específica, mas adianto que são coleções de objetos similares. Objetos do tipo &lt;em&gt;String&lt;/em&gt; armazenam cadeias de caracteres. Neste caso, &lt;code&gt;args&lt;/code&gt; recebe todos os argumentos passados na linha de comando quando o programa é executado.&lt;/p&gt;&lt;p&gt;Mais uma coisinha: o método &lt;code&gt;main()&lt;/code&gt; é apenas um ponto de entrada no seu programa. Um programa complexo terá dezenas ou até centenas de classes, mas apenas uma delas possuirá o método &lt;code&gt;main()&lt;/code&gt; para início do programa. Em algumas situações, aliás, o método &lt;code&gt;main()&lt;/code&gt; é até mesmo dispensável. No caso dos &lt;span style=&quot;color: #ff6600;&quot;&gt;&lt;em&gt;applets&lt;/em&gt;&lt;/span&gt;, por exemplo — programas Java embutidos em navegadores Web — não será preciso usar &lt;code&gt;main()&lt;/code&gt;, uma vez que os navegadores Web usam outros métodos para iniciar a execução dos &lt;em&gt;applets&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;header6&quot;&gt;O método &lt;code&gt;println()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Analisemos, para terminar, a última linha de código:&lt;/p&gt;
&lt;pre class=&quot;brush: java, first-line: 7, toolbar: false&quot;&gt;
System.out.println(&quot;Olá mundão velho!&quot;); // exibe mensagem
&lt;/pre&gt;&lt;p&gt;Esta linha exibe a &lt;em&gt;String&lt;/em&gt; &quot;Olá mundão velho!&quot;, inserindo uma nova linha ao final, no console ou terminal de vídeo para onde está direcionada a saída-padrão. A saída é implementada pelo método &lt;code&gt;println()&lt;/code&gt;. Neste caso, &lt;code&gt;println()&lt;/code&gt; exige a &lt;em&gt;String&lt;/em&gt; que lhe é passada como parâmetro. A linha começa com &lt;code&gt;System.out&lt;/code&gt;. Embora seja meio complicado explicar isso neste ponto do curso, &lt;code&gt;System&lt;/code&gt; é uma classe pré-definida que dá acesso ao sistema operacional, e &lt;code&gt;out&lt;/code&gt; é a &lt;em&gt;stream&lt;/em&gt; de saída conectada ao console.&lt;/p&gt;&lt;p&gt;Os métodos de entrada e saída via console, evidentemente, não são muito aplicados no mundo real da programação Java, uma vez que os ambientes operacionais modernos possuem uma interface gráfica. Todavia, tendo em vista sua simplicidade de uso, são ótimos para demonstrações e iremos usá-los bastante na parte inicial do curso, até apresentarmos outras formas de entrada/saída de dados usando Java.&lt;/p&gt;&lt;p&gt;Observe que a declaração do método &lt;code&gt;println()&lt;/code&gt; termina com um ponto-e-vírgula (&lt;code&gt;;&lt;/code&gt;). Todas as declarações em Java terminam com um ponto-e-vírgula e o motivo pelo qual as outras linhas não terminam dessa forma é porque não são, tecnicamente, declarações.&lt;/p&gt;&lt;p&gt;A primeira &lt;code&gt;}&lt;/code&gt; (linha 9) no programa encerra o bloco de código de &lt;code&gt;main()&lt;/code&gt;, e a útima &lt;code&gt;}&lt;/code&gt; (linha 11) encerra a definição da classe &lt;code&gt;OlaMundo&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;header7&quot;&gt;Edição do código-fonte&lt;/h2&gt;&lt;p&gt;Para implementar nosso primeiro programa na linguagem Java, a primeira coisa a fazer é criar o arquivo do código-fonte examinado na &lt;a href=&quot;#header1&quot;&gt;seção anterior&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Para isso, você poderá usar qualquer editor de textos que salve arquivos de texto puros, ou seja, sem nenhuma formatação especial. Dois bons editores, ambos com versões gratuítas, são o &lt;a href=&quot;http://notepad-plus-plus.org/download/v6.7.4.html&quot; target=&quot;_blank&quot;&gt;Notepad++&lt;/a&gt; e o &lt;a class=&quot;ext&quot; href=&quot;http://www.sublimetext.com/&quot; target=&quot;_blank&quot;&gt;SublimeText&lt;/a&gt;. Mas poderá ser usado qualquer editor mais simples, como o Bloco de Notas do Windows, o Leafpad no Linux ou o TextEdit no Mac OS X.&lt;/p&gt;&lt;p&gt;Para esta demonstração, vamos usar o SublimeText. Copie o código-fonte do programa &quot;&lt;strong&gt;OlaMundo&lt;/strong&gt;&quot;, tomando cuidado para reproduzir tudo fielmente, pois qualquer pequeno equívoco irá gerar um erro na compilação. Cuidado, em especial, com a caixa das letras, pois o compilador faz distinção entre maiúsculas e minúsculas. Observe, também, o ponto-e-virgula que encerra a declaração e os pares de chaves, parênteses e colchetes.&lt;/p&gt;&lt;p&gt;Salve o arquivo com o nome &lt;code&gt;OlaMundo.java&lt;/code&gt;. Como já mencionamos, é essencial que o nome dado ao arquivo do código-fonte seja exatamente o mesmo que foi dado à classe, para que não ocorra um erro durante a compilação. Na figura abaixo, vemos a caixa de diálogo do Windows para salvar o arquivo a partir do editor Sublime:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://i.imgur.com/DSq635k.png&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;O editor SublimeText, como outros, reconhece o tipo de arquivo como código-fonte Java a partir da extensão (&lt;strong&gt;.java&lt;/strong&gt;) e faz o realce das palavras-chave de acordo com a sintaxe da linguagem (&lt;em&gt;syntax highlighting&lt;/em&gt;), facilitando muito a visualização do código. Todos os IDE, como o Eclipse que iremos usar neste curso, também possuem esta funcionalidade nos seus editores. Observe como o texto do código ficou todo colorido na próxima figura:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;sublime_win&quot; src=&quot;http://i.imgur.com/Lrb3z1g.png&quot; width=&quot;800&quot; height=&quot;518&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;Aproveite para conferir, no painel da esquerda, que o nome do arquivo, &lt;strong&gt;&quot;OlaMundo.java&quot;&lt;/strong&gt; corresponde exatamente o nome da classe (&lt;strong&gt;OlaMundo&lt;/strong&gt;).&lt;/p&gt;
&lt;h2 id=&quot;header8&quot;&gt;Compilação&lt;/h2&gt;&lt;p&gt;Compilar o código-fonte significa usar um programa, chamado compilador, o qual irá ler as definições da classe, escritos na linguagem de programação Java e compilá-las em um arquivo &lt;em&gt;bytecode&lt;/em&gt; da classe, que também terá o mesmo nome dela, variando apenas a extensão, que será &quot;&lt;strong&gt;.class&lt;/strong&gt;&quot;, ao invés de &quot;&lt;strong&gt;.java&lt;/strong&gt;&quot;.&lt;/p&gt;&lt;p&gt;O compilador Java faz parte do JDK e é chamado &lt;strong&gt;javac&lt;/strong&gt;. A forma geral para invocá-lo a partir da linha de comando, é a seguinte:&lt;/p&gt;&lt;p&gt;&lt;code&gt;javac [opções] [arquivos-fonte] [classes] [@argfiles]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Os argumentos podem ser colocados em qualquer ordem e representam:&lt;br/&gt;&lt;ul&gt;&lt;br/&gt; &lt;li&gt;&lt;strong&gt;opções&lt;/strong&gt;: as opções de linha-de-comando.&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;strong&gt;arquivos-fonte&lt;/strong&gt;: um ou mais arquivos-fonte a serem compilados (como &lt;strong&gt;OlaMundo.java&lt;/strong&gt;).&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;strong&gt;classes&lt;/strong&gt;: uma ou mais classes a serem processadas para anotações (como &lt;strong&gt;OlaMundo.class&lt;/strong&gt;).&lt;/li&gt;&lt;br/&gt; &lt;li&gt;&lt;strong&gt;@argfiles&lt;/strong&gt;: um ou mais arquivos que listam opções e arquivos-fonte.&lt;/li&gt;&lt;br/&gt;&lt;/ul&gt;&lt;/p&gt;&lt;p&gt;Como você pode ver, o programa possui muitas funcionalidades, inclusive para geração de documentação. Para consultar um resumo de todas as opções disponíveis, use o comando: &lt;strong&gt;javac -help&lt;/strong&gt;. Será exibida a relação completa das opções, conforme a figura abaixo:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;javac_help&quot; src=&quot;http://i.imgur.com/RSc7YL7.png&quot; width=&quot;709&quot; height=&quot;508&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;Na &lt;a class=&quot;ext&quot; href=&quot;http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javac.html&quot; target=&quot;_blank&quot;&gt;documentação da Oracle&lt;/a&gt; encontram-se todos os pormenores para usar o programa &lt;strong&gt;javac&lt;/strong&gt; em toda a sua potencialidade.&lt;/p&gt;&lt;p&gt;Na verdade, todo o desenvolvimento em Java pode ser feito apenas com um editor de textos e os programas de linha de comando &lt;strong&gt;javac&lt;/strong&gt;, para compilação do aplicativo e &lt;strong&gt;java&lt;/strong&gt;, para sua execução. Evidentemente, os IDEs facilitam muito a vida do programador, mas é muito importante saber como as coisas acontecem nos bastidores.&lt;/p&gt;&lt;p&gt;Para compilar nosso pequeno programa &quot;&lt;strong&gt;OlaMundo&lt;/strong&gt;&quot;, acesse o diretório onde o programa foi salvo. Desta forma, não precisamos nos preocupar com o caminho (&lt;strong&gt;path&lt;/strong&gt;) onde está o arquivo, embora haja opções para sua localização a partir de qualquer lugar. Fazemos isso para simplificar o comando. Digite: &lt;code&gt;javac OlaMundo.java&lt;/code&gt; e seu programa será compilado, gerando o arquivo &lt;code&gt;OlaMundo.class&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Uma dica para quem usa o Windows: para abrir uma janela do &lt;em&gt;prompt&lt;/em&gt; de comando em determinada pasta, clique com o botão direito do mouse, enquanto aperta simultaneamente a tecla &lt;kbd&gt;Shift&lt;/kbd&gt;, sobre a área da caixa de diálogo do Windows Explorer correspondente à pasta onde deseja abrir o &lt;em&gt;prompt&lt;/em&gt; de comando e selecione a opção &lt;code&gt;Abrir janela de comando aqui&lt;/code&gt;. Consulte a figura a seguir:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;win_open_cmd&quot; src=&quot;http://i.imgur.com/QvnkhLk.png&quot; width=&quot;800&quot; height=&quot;450&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;Observe que é preciso passar o nome seguido da respectiva extensão (&lt;strong&gt;.java&lt;/strong&gt;) para o programa &lt;strong&gt;javac&lt;/strong&gt;. Digite o comando: &lt;code&gt;javac OlaMundo.java&lt;/code&gt;. Depois de uma brevíssima pausa, reaparece o &lt;em&gt;prompt&lt;/em&gt; de comando. Isso significa que seu programa compilou sem nenhum erro, pois, caso contrário, estes seriam exibidos. Confira que foi gerado o arquivo &lt;code&gt;OlaMundo.class&lt;/code&gt; na pasta onde o código-fonte foi compilado. Veja o resultado na figura abaixo:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;olamundo_class&quot; src=&quot;http://i.imgur.com/8EUn7Gk.png&quot; width=&quot;800&quot; height=&quot;577&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;Se quiser ver o compilador em ação, use a opção &lt;code&gt;-verbose&lt;/code&gt;. O comando seria, então: &lt;code&gt;javac -verbose OlaMundo.java&lt;/code&gt;. Veja como o compilador acessa a biblioteca-padrão &lt;code&gt;java.lang&lt;/code&gt;, e quanta coisa é incorporada ao seu código. Essa é a grande sacada da programação orientada a objetos: eles podem ser usados mesmo sem conhecer os detalhes de sua implementação. É como dirigir um carro, sem precisar saber como funciona seu motor, ou conhecer a composição química do combustível usado.&lt;/p&gt;
&lt;h2 id=&quot;header9&quot;&gt;Execução&lt;/h2&gt;&lt;p&gt;O programa &lt;strong&gt;java&lt;/strong&gt; executa o aplicativo Java e sua forma na linha-de-comando é a seguinte:&lt;/p&gt;&lt;p&gt;&lt;code&gt;java [opções] classe [argumentos]&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Existem muitas outras funcionalidades e outro programa parecido: o &lt;strong&gt;javaw&lt;/strong&gt;, cujos detalhes podem ser consultados na &lt;a class=&quot;ext&quot; href=&quot;http://docs.oracle.com/javase/7/docs/technotes/tools/windows/java.html&quot; target=&quot;_blank&quot;&gt;documentação da Oracle&lt;/a&gt;. Para examinar as opções de linha-de-comando disponíveis, use o comando: &lt;code&gt;java -help&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Para executar nosso &lt;em&gt;bytecode&lt;/em&gt; compilado em &lt;code&gt;OlaMundo.class&lt;/code&gt;, digite o comando: &lt;code&gt;java OlaMundo&lt;/code&gt;. Observe que não deve ser digitada a extensão do arquivo (&lt;strong&gt;.class&lt;/strong&gt;). Veja o resultado no &lt;em&gt;prompt&lt;/em&gt; de comando do Windows na figura a seguir:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;olamundo_exec&quot; src=&quot;http://i.imgur.com/zoWpiA0.png&quot; width=&quot;697&quot; height=&quot;428&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;O resultado no &lt;em&gt;prompt&lt;/em&gt; de comando do Windows é meio estranho, pois ele não decodifica corretamente os caracteres acentuados e a &lt;em&gt;string&lt;/em&gt; exibida é:&lt;/p&gt;&lt;p&gt;&lt;code&gt;OlÃ¡ mundÃ£o velho!&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Isso não acontece nos sistemas operacionais Linux e Mac OS X, nos quais a &lt;em&gt;string&lt;/em&gt; é apresentada corretamente acentuada, como na figura seguinte, do terminal do linux:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;olamundo_linux&quot; src=&quot;http://i.imgur.com/gt0osM7.png&quot; width=&quot;733&quot; height=&quot;487&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;header10&quot;&gt;Caracteres Unicode&lt;/h2&gt;&lt;p&gt;O motivo disso é que o &lt;em&gt;prompt&lt;/em&gt; de comando do Windows em português (&lt;code&gt;cmd.exe&lt;/code&gt;), usa a página de código 850 (&lt;em&gt;Multilingual - Latin I&lt;/em&gt;), enquanto Java usa a codificação UTF-16 para objetos &lt;strong&gt;String&lt;/strong&gt;. Use o comando &lt;a class=&quot;ext&quot; href=&quot;http://ss64.com/nt/chcp.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;chcp&lt;/strong&gt; &lt;/a&gt; para conferir. Uma solução seria trocar a página de código para &lt;a class=&quot;ext&quot; href=&quot;http://en.wikipedia.org/wiki/UTF-8&quot; target=&quot;_blank&quot;&gt;UTF-8&lt;/a&gt;, usando o comando: &lt;code&gt;chcp 65001&lt;/code&gt;. Mas há uma solução melhor: use os caracteres de escape &lt;code&gt;/u&lt;/code&gt; para inserir o código Unicode do caracter acentuado. O código-fonte do nosso programa ficaria então como abaixo:&lt;/p&gt;
&lt;pre class=&quot;brush: java, toolbar: false&quot;&gt;
/* OlaMundoUnicode em Java */

public class OlaMundoUnicode {

	public static void main(String[] args) {

		System.out.println(&quot;Ol\u00e1 mund\u00e3o velho!&quot;);

	}

}
&lt;/pre&gt;&lt;p&gt;Compile o novo programa (&lt;code&gt;javac OlaMundoUnicode.java&lt;/code&gt;) e execute-o (&lt;code&gt;java OlaMundoUnicode&lt;/code&gt;). O problema está resolvido, conforme pode ser visto na figura a seguir:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;OlaMundoUnicode&quot; src=&quot;http://i.imgur.com/XWENH80.png&quot; width=&quot;600&quot; height=&quot;421&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;Forneço a seguir uma tabela com os códigos Unicode dos caracteres latinos acentuados:&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;table style=&quot;width:60%&quot; align=&quot;center&quot;&gt;
    &lt;tr style=&quot;background-color: #CBDABB&quot;&gt;
        &lt;td&gt;&quot;á = \u00e1&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ê = \u00ea&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Î = \u00ce&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ú = \u00fa&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #DEE8D4&quot;&gt;
        &lt;td&gt;&quot;à = \u00e0&quot;&lt;/td&gt;
        &lt;td&gt;&quot;è = \u00e8&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ï = \u00cf&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ù = \u00f9&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #CBDABB&quot;&gt;
        &lt;td&gt;&quot;â = \u00e2&quot;&lt;/td&gt;
        &lt;td&gt;&quot;É = \u00c9&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ó = \u00f3&quot;&lt;/td&gt;
        &lt;td&gt;&quot;û = \u00fb&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #DEE8D4&quot;&gt;
        &lt;td&gt;&quot;ã = \u00e3&quot;&lt;/td&gt;
        &lt;td&gt;&quot;È = \u00c8&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ò = \u00f2&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ü = \u00fc&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #CBDABB&quot;&gt;
        &lt;td&gt;&quot;ä = \u00e4&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ê = \u00ca&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ô = \u00f4&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ú = \u00da&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #DEE8D4&quot;&gt;
        &lt;td&gt;&quot;Á = \u00c1&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ë = \u00cb&quot;&lt;/td&gt;
        &lt;td&gt;&quot;õ = \u00f5&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ù = \u00d9&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #CBDABB&quot;&gt;
        &lt;td&gt;&quot;À = \u00c0&quot;&lt;/td&gt;
        &lt;td&gt;&quot;í = \u00ed&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ö = \u00f6&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Û = \u00db&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #DEE8D4&quot;&gt;
        &lt;td&gt;&quot;Â = \u00c2&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ì = \u00ec&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ó = \u00d3&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ç = \u00e7&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #CBDABB&quot;&gt;
        &lt;td&gt;&quot;Ã = \u00c3&quot;&lt;/td&gt;
        &lt;td&gt;&quot;î = \u00ee&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ò = \u00d2&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ç = \u00c7&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #DEE8D4&quot;&gt;
        &lt;td&gt;&quot;Ä = \u00c4&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ï = \u00ef&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ô = \u00d4&quot;&lt;/td&gt;
        &lt;td&gt;&quot;ñ = \u00f1&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #CBDABB&quot;&gt;
        &lt;td&gt;&quot;é = \u00e9&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Í = \u00cd&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Õ = \u00d5&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ñ = \u00d1&quot;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr style=&quot;background-color: #DEE8D4&quot;&gt;
        &lt;td&gt;&quot;Ö = \u00d6&quot;&lt;/td&gt;
        &lt;td&gt;&quot;Ì = \u00cc&quot;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;Para o desenvolvimento de programas complexos será realmente imprescindível o uso de um IDE como o Eclipse ou NetBeans, mas esses programas usam essas mesmas ferramentas básicas do JDK, de forma que é importante conhecer a fundo seu funcionamento, para otimização do próprio IDE e sua adequação às necessidades do seu projeto.&lt;/p&gt;
&lt;h2 id=&quot;header11&quot;&gt;Erros de compilação&lt;/h2&gt;&lt;p&gt;Uma das grandes vantagens de uma linguagem de programação fortemente tipada como Java, é a possibilidade de identificar erros de sintaxe durante a compilação do código.&lt;/p&gt;&lt;p&gt;Veja o que acontece quando tentamos compilar o código abaixo:&lt;/p&gt;
&lt;pre class=&quot;brush: java, highlight: [3], title: &apos;OlaMundoUnicode.java com erro de sintaxe&apos;, toolbar: false&quot;&gt;
public class OlaMundoUnicode {

	public static void main(string[] args) {
		System.out.println(&quot;Ol\u00e1 mund\u00e3o velho!&quot;);

	}

}
&lt;/pre&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;ErroCompilacao&quot; src=&quot;http://i.imgur.com/o1rZBAn.png&quot; width=&quot;600&quot; height=&quot;421&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;Como podemos observar, ocorreu um erro durante a compilação do programa, e não foi gerado o arquivo &lt;strong&gt;.class&lt;/strong&gt; com o &lt;em&gt;bytecode&lt;/em&gt; correspondente.&lt;/p&gt;&lt;p&gt;Neste caso, o compilador informa com precisão o local da ocorrência do erro: a palavra &quot;String&quot; na linha 3 foi escrita com um &quot;s&quot; minúsculo e, como já enfatizamos, Java faz distinção entre a caixa das letras. Basta efetuar a correção para um &quot;S&quot; maiúsculo, que o programa compilará sem nenhum problema.&lt;/p&gt;&lt;p&gt;Existem outros erros de sintaxe apontados pelo compilador, que não são rastreados de forma tão direta, mas podemos contar com utilitários especializados, chamados &quot;&lt;em&gt;debuggers&lt;/em&gt;&quot;, que estudaremos mais adiante, os quais facilitam nossa vida na identificação desses erros.&lt;/p&gt;
&lt;h2 id=&quot;header12&quot;&gt;Erros de execução&lt;/h2&gt;&lt;p&gt;Um outro tipo de erro pode ocorrer depois do programa ser compilado normalmente, e só é identificado durante sua execução. Observe o código e a figura abaixo:&lt;/p&gt;
&lt;pre class=&quot;brush: java, highlight: [3], title:&apos;OlaMundoUnicode.java com erro durante a execução&apos;, toolbar: false&quot;&gt;
public class OlaMundoUnicode {

	public static int main(String[] args) {
		System.out.println(&quot;Ol\u00e1 mund\u00e3o velho!&quot;);

	}

}
&lt;/pre&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;ErroExecucao&quot; src=&quot;http://i.imgur.com/4vG8wH3.png&quot; width=&quot;600&quot; height=&quot;421&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;&lt;p&gt;Aqui nós desrespeitamos a sintaxe do método &lt;code&gt;main()&lt;/code&gt; e estamos tentando retornar um valor inteiro enquanto, conforme já comentamos, este método não deve retornar valor algum.&lt;/p&gt;&lt;p&gt;Novamente somos informados do erro e, também neste caso, o motivo do erro é explicitamente declarado: erro na sintaxe do método &lt;code&gt;main()&lt;/code&gt;, cujo retorno deve ser modificado para &lt;code&gt;void&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Existem outros tipos de erros ainda mais difíceis de localizar, como os erros na lógica do programa, mas isso vamos deixar para ver mais adiante, quando estudarmos os &lt;em&gt;debuggers&lt;/em&gt; usados pelos IDE e outros programas específicos para esse tipo de depuração.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;java-logo&quot; src=&quot;http://i.imgur.com/b2JsnbI.jpg&quot; width=&quot;256&quot; height=&quot;256&quot; title=&quot;source: imgur.com&quot; /&gt;&lt;/p&gt;
	    </description>
      </item>
      <item>
        <title>Curso de Java - Aula 1</title>
        <link>http://ja-gaeta.github.io2014/curso-de-java-aula-001.html</link>
        <pubDate>Sex, 21 nov 2014 00:00:00 -0200</pubDate>
        <guid isPermaLink="false">2014/curso-de-java-aula-001.html</guid>
        <description>
	        &lt;p style=&quot;text-align: center;&quot;&gt;&lt;iframe src=&quot;https://www.youtube.com/embed/-6p1ZjDVxCE&quot; width=&quot;560&quot; height=&quot;315&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;allowfullscreen&quot;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;h2&gt;Introdução —&lt;/h2&gt;&lt;p&gt;Esta é a primeira aula publicada no &lt;em&gt;YouTube&lt;/em&gt; do meu Curso de Java: uma despretenciosa introdução à programação usando essa linguagem madura, robusta e amplamente difundida pelas suas excepcionais características. O objetivo principal é desenvolver essas aulas de uma maneira bem humorada, mas sem descuidar do provimento de uma formação sólida e extensa da variada tecnologia Java.&lt;/p&gt;&lt;p&gt;Aqui no Ponto G++, além do &lt;em&gt;link&lt;/em&gt; para a vídeo-aula, você encontrará extenso material de apoio para cada lição e &lt;em&gt;links&lt;/em&gt; para matéria correlata aos assuntos tratados, possibilitando-lhe aprofundar-se ainda mais nos estudos. Há também um &lt;em&gt;link&lt;/em&gt; para acessar todo o código-fonte apresentado nas aulas, disponível no GitHub.&lt;/p&gt;&lt;p&gt;Tudo o que aprendi foi por esforço próprio, de forma auto-didática, ao longo de muitos anos de dedicação ao estudo. Agora que estou aposentado, disponho do tempo e dos recursos para compartilhar tudo que aprendi, de uma forma muito altruísta.&lt;/p&gt;&lt;p&gt;Desejo-lhe boa sorte nos estudos. Esteja certo de que o seu sucesso será minha maior recompensa.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3&gt;Programa da aula:&lt;/h3&gt;
&lt;ul&gt;
	&lt;li&gt;Introdução ao Curso:
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;#header1&quot;&gt;Por que Java?&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Java Development Kit (JDK) e Java Runtime Environment (JRE):
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;#header2&quot;&gt;O que são.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header3&quot;&gt;Instalação.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
	&lt;li&gt;Eclipse IDE (Integrated Development Environment):
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;#header4&quot;&gt;O que é.&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;#header5&quot;&gt;Instalação.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;header1&quot;&gt;Por que Java?&lt;/h2&gt;&lt;p&gt;Se quiser conhecer a história e o desenvolvimento da linguagem Java desde sua criação até os dias atuais, consulte &lt;a href=&quot;/programacao/java-como-tudo-comecou/&quot;&gt;este artigo&lt;/a&gt;, publicado aqui mesmo no Ponto G++. Mas, antes de mais nada, acho que a melhor maneira para se ter uma ideia geral da linguagem de programação Java, é analisar as diretrizes que nortearam o seu projeto, conforme está definido no clássico &lt;a href=&quot;http://www.oracle.com/technetwork/java/intro-141325.html&quot; target=&quot;_blank&quot;&gt;&lt;em&gt;The Java Language Environment&lt;/em&gt;&lt;/a&gt;, nas palavras do seu principal criador, James Gosling. Nesta tradução, você vai observar que deixei os termos técnicos de uso corriqueiro na sua forma original, em inglês. Adotarei essa metodologia de forma consistente, ao longo destas aulas.&lt;br/&gt;&lt;blockquote&gt;&quot;Os requisitos do projeto da linguagem de programação Java foram estabelecidos com base na natureza dos ambientes de computação nos quais os programas são executados.&lt;/p&gt;&lt;p&gt;O enorme crescimento da Internet e da &lt;em&gt;World-Wide Web&lt;/em&gt; nos levou a uma forma inteiramente nova de enxergar o desenvolvimento e distribuição de programas. Para conviver no mundo do comércio eletrônico e da distribuição, a tecnologia Java precisava ser capaz de desenvolver aplicativos seguros, de alta performance, e extremamente robustos, sobre múltiplas plataformas em redes distribuídas.&lt;/p&gt;&lt;p&gt;A operação sobre múltiplas plataformas em redes heterogêneas invalida os esquemas tradicionais de distribuição binária, &lt;em&gt;release&lt;/em&gt;, &lt;em&gt;upgrade&lt;/em&gt;, &lt;em&gt;patch&lt;/em&gt;, etc. Para sobreviver nessa selva, a linguagem de programação Java precisava ser neutra à arquitetura, transportável, e dinamicamente adaptável.&lt;/p&gt;&lt;p&gt;O sistema que emergiu para ir de encontro a essas necessidades é simples, de forma que pode ser programado com facilidade pela maioria dos desenvolvedores; familiar, para que os desenvolvedores atuais possam aprender a linguagem de programação Java sem sacrifício; orientada a objeto, para tirar proveito das metodologias modernas para desenvolvimento de programas e se ajustar com os aplicativos distribuídos num ambiente cliente-servidor; &lt;em&gt;multithreaded&lt;/em&gt;, para alta performance nos aplicativos que precisem executar atividades de múltipla concorrência, tais como multimídia; e interpretada, para maximizar sua capacidade dinâmica e de portabilidade.&quot;&lt;/blockquote&gt;&lt;/p&gt;&lt;p&gt;Nestes poucos parágrafos estão condensados os conceitos fundamentais da linguagem de programação Java, responsáveis pelo seu tremendo sucesso nas décadas seguintes à sua criação. Estes conceitos podem ser assim resumidos:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Simples;&lt;/li&gt;
	&lt;li&gt;Orientada a Objeto;&lt;/li&gt;
	&lt;li&gt;Computação Distribuída;&lt;/li&gt;
	&lt;li&gt;Execução encadeada (&lt;em&gt;multithreading&lt;/em&gt;);&lt;/li&gt;
	&lt;li&gt;Dinâmica;&lt;/li&gt;
	&lt;li&gt;Indiferente à arquitetura do &lt;em&gt;hardware&lt;/em&gt;;&lt;/li&gt;
	&lt;li&gt;Transportável;&lt;/li&gt;
	&lt;li&gt;Alta performance;&lt;/li&gt;
	&lt;li&gt;Robusta;&lt;/li&gt;
	&lt;li&gt;Segura.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Vamos examiná-los com um pouco mais de profundidade.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Simples&lt;/strong&gt; – Simplicidade aqui não significa trivialidade, mas a característica de Java incorporar uma sintaxe moderna, parecida com a de outras linguagens largamente usadas, principalmente C e C++. Isso a torna familiar para os desenvolvedores, que podem atingir um elevado nível de produtividade num lapso de tempo muito curto.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Orientada a Objeto&lt;/strong&gt; – Este é o último estágio de desenvolvimento das linguagens de programação, implementado para possibilitar o projeto de programas grandes e complexos, no qual é normal trabalharem grandes equipes simultaneamente. Neste sistema, o programa é desenvolvido em torno dos “objetos” que manipula, ao invés das ações que executa, diferentemente da técnica procedural anterior. Como veremos mais adiante, os conceitos-chave da Orientação a Objetos (OO) são o &lt;a href=&quot;http://www.devmedia.com.br/encapsulamento-polimorfismo-heranca-em-java/12991&quot; target=&quot;_blank&quot;&gt;encapsulamento&lt;/a&gt;, que permite esconder e proteger dados e métodos de forma a facilitar o desenvolvimento compartilhado do programa, e a &lt;a href=&quot;http://www.devmedia.com.br/encapsulamento-polimorfismo-heranca-em-java/12991&quot; target=&quot;_blank&quot;&gt;herança&lt;/a&gt;, que possibilita o reaproveitamento do código.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Computação Distribuída&lt;/strong&gt; – Na sua forma mais genérica, a computação distribuída pode ser entendida como qualquer processamento que envolva múltiplos computadores, remotos em relação uns aos outros, em que cada um tem um papel na computação de um problema ou processamento de informação.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Execução Encadeada (&lt;em&gt;Multithreading&lt;/em&gt;)&lt;/strong&gt; – Java é a primeira linguagem de programação a incluir explicitamente o conceito de &lt;em&gt;Threads&lt;/em&gt; na própria linguagem. Há uma excelente definição de &lt;em&gt;multithreading&lt;/em&gt; na Wikipédia:&lt;/p&gt;
&lt;blockquote&gt;&quot;Linha ou Encadeamento de execução (em inglês: &lt;em&gt;Thread&lt;/em&gt;), é uma forma de um processo dividir a si mesmo em duas ou mais tarefas que podem ser executadas concorrencialmente. O suporte à &lt;em&gt;thread&lt;/em&gt; é fornecido pelo próprio sistema operacional, no caso da linha de execução ao nível do núcleo (em inglês: &lt;em&gt;Kernel-Level Thread&lt;/em&gt; (KLT)), ou implementada através da biblioteca de uma determinada linguagem, no caso de uma &lt;em&gt;User-Level Thread&lt;/em&gt; (ULT).&quot;&lt;/blockquote&gt;&lt;p&gt;Se você já escreveu algum programa em Java então já fez um programa &lt;em&gt;multithreaded&lt;/em&gt;. Todo programa em Java possui pelo menos uma &lt;em&gt;thread&lt;/em&gt;: a &lt;em&gt;thread&lt;/em&gt; &lt;code&gt;main&lt;/code&gt;. Além dessa, a máquina virtual mantém algumas outras que realizam tarefas como coleta de lixo ou finalização de objetos. Algumas classes disponíveis na API de Java também utilizam &lt;em&gt;threads&lt;/em&gt; em suas implementações. Como exemplo, podemos citar as classes de Java Swing ou as classes da implementação de RMI (&lt;em&gt;Remote Method Invocation&lt;/em&gt;). Em Java é possível lançar várias linhas de execução do mesmo programa. Chamamos a isso de &lt;em&gt;Threads&lt;/em&gt; ou &lt;em&gt;Multithreading&lt;/em&gt;. A diferença com os processos e programas acima é que Java é interpretada. Quem cuida dos vários &lt;em&gt;Threads&lt;/em&gt; de um programa é o próprio interpretador Java. Algumas vantagens em relação aos processos:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;O chaveamento entre as &lt;em&gt;threads&lt;/em&gt; é mais rápido que o chaveamento entre processos;&lt;/li&gt;
	&lt;li&gt;A troca de mensagens entre as &lt;em&gt;threads&lt;/em&gt; também é mais eficiente.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Dinâmica&lt;/strong&gt; – Não confundir esta característica ora apresentada com a &lt;em&gt;tipagem&lt;/em&gt; da linguagem, que em Java é &lt;em&gt;estática&lt;/em&gt;. O termo &quot;dinâmica&quot;, é aqui empregado com relação à &lt;em&gt;linkagem&lt;/em&gt; do código-executável. Em linguagens como C e C++, todo o código tem que ser compilado para que possa ser executado na forma de um programa. Em Java, as classes são compiladas a medida em que são necessárias. Se uma classe não é necessária durante a fase de execução, ela sequer será compilada num &lt;em&gt;bytecode&lt;/em&gt;. Essa característica vem a calhar, especialmente na programação em redes, onde não sabemos de antemão qual código será executado. Um programa em execução pode carregar classes do sistema de arquivos ou de um servidor remoto. Isso também torna teoricamente possível que um programa Java altere seu próprio código durante a execução, como se de certa forma implementasse inteligência artificial. Seria mais realístico imaginar, contudo, que um programa Java gera o código antes da execução e, então, o executa. Com algum mecanismo de &lt;em&gt;feedback&lt;/em&gt;, o código gerado pode ir melhorando com o tempo.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Indiferente à arquitetura do hardware&lt;/strong&gt; – A grande pretensão da linguagem de programação Java sempre foi, sem dúvida, a neutralidade à arquitetura de &lt;em&gt;hardware&lt;/em&gt; – daí o famoso &lt;em&gt;slogan&lt;/em&gt; da Sun: “&lt;em&gt;write once, run anywhere&lt;/em&gt;” (“escreva uma vez, execute em qualquer lugar”). Para conseguir isso, a técnica foi usar uma máquina virtual interpretada como camada intermediária entre o aplicativo e o sistema operacional, produzindo programas que rodavam mais lentamente do que seus equivalentes compilados integralmente, na forma tradicional, usando um compilador C++, por exemplo. Isso trouxe para Java a má reputação de produzir programas lentos. Mas desde há muito tempo que a Máquina Virtual Java produz programas que rodam muito mais rápido. O compilador &lt;em&gt;just-in-time&lt;/em&gt; (JIT), compila o &lt;em&gt;bytecode&lt;/em&gt; Java em código nativo quando o programa é executado, e mantém o código compilado para usar sempre que necessário. Máquinas Virtuais mais sofisticadas usam até mesmo a &lt;em&gt;dynamic recompilation&lt;/em&gt;, na qual a Máquina Virtual pode, após analisar o comportamento do programa em execução, recompilá-lo seletivamente e otimizar suas partes críticas. Essas duas técnicas permitem que o programa tire proveito da velocidade do código nativo, sem sacrificar sua portabilidade.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Transportável&lt;/strong&gt; – A portabilidade é tecnicamente uma meta difícil de atingir, e o sucesso de Java em conseguir isso é, de certa forma, matéria de controvérsia. Embora seja possível, de fato, escrever programas que se comportem de forma consistente através de muitas plataformas hospedeiras, uma grande variedade delas contendo pequenos erros ou inconsistências, levou alguns a parodiarem jocosamente o &lt;em&gt;slogan&lt;/em&gt; mencionado acima com a versão: “&lt;em&gt;write once, debug everywhere&lt;/em&gt;” – acho que nem precisa de tradução. :)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Alta Performance&lt;/strong&gt; – No seu &lt;em&gt;paper&lt;/em&gt;, Gosling afirma que a performance sempre esteve em mira durante o desenvolvimento de Java. Segundo ele:&lt;/p&gt;
&lt;blockquote&gt;&quot;(...) a plataforma Java alcança uma performance superior adotando um esquema no qual o interpretador pode rodar a plena velocidade sem precisar verificar o ambiente de execução. O &lt;em&gt;garbage collector&lt;/em&gt; automático é executado numa &lt;em&gt;thread&lt;/em&gt; de baixa prioridade em &lt;em&gt;background&lt;/em&gt;, assegurando uma alta probabilidade de que a memória esteja disponível quando solicitada, o que leva a melhorar a performance. Aplicativos que requeiram grande uso de CPU podem ser projetados de tal forma que as seções de computação intensiva possam ser reescritas em código nativo da máquina como requerido e interfaceadas com a plataforma Java. Em geral, os usuários percebem que os aplicativos interativos respondem rapidamente a despeito de serem interpretados.&quot;&lt;/blockquote&gt;&lt;p&gt;Na prática, todavia, há diferenças. Encontramos na &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_performance&quot; target=&quot;_blank&quot;&gt;Wikipedia&lt;/a&gt; um interessante comparativo entre a performance de Java e a de outras linguagens também muito utilizadas atualmente, o qual transcrevo a seguir.&lt;/p&gt;
&lt;blockquote&gt;&quot;A comparação objetiva da performance de um programa Java com um equivalente escrito em outra linguagem, como C++, requer que um &lt;em&gt;benchmark&lt;/em&gt; seja inteiramente construído com muito cuidado para comparar programas expressando algorítimos escritos de uma maneira tão idêntica quanto seja tecnicamente possível. A plataforma-alvo do &lt;em&gt;bytecode&lt;/em&gt; Java é a plataforma Java, e o &lt;em&gt;bytecode&lt;/em&gt; pode ser interpretado ou compilado em código nativo de máquina pela JVM. Outros compiladores têm como alvo, quase sempre, uma plataforma de &lt;em&gt;hardware&lt;/em&gt; ou &lt;em&gt;software&lt;/em&gt; específica, produzindo um código de máquina que ficará virtualmente imutável durante sua execução. Cenários muito diferentes e difíceis de comparar emergem dessas duas abordagens distintas: compilações estáticas contra compilações dinâmicas e recompilações, além da disponibilidade de informação precisa sobre o ambiente de execução, entre outras variáveis. Java é compilada, quase sempre, &lt;em&gt;just-in-time&lt;/em&gt; (JIT) em tempo de execução pela JVM, mas também pode ser compilada &lt;em&gt;ahead-of-time&lt;/em&gt; (AOT), tal como C++. Quando é compilada &lt;em&gt;just-in-time&lt;/em&gt;, sua performance, em pequenos &lt;em&gt;benchmarks&lt;/em&gt; é geralmente:
&lt;ul&gt;
	&lt;li&gt;mais lenta do que linguagens compiladas similares como C ou C++,&lt;/li&gt;
	&lt;li&gt;idêntica a outras linguagens compiladas &lt;em&gt;just-in-time&lt;/em&gt;, como C#,&lt;/li&gt;
	&lt;li&gt;muito mais rápida do que linguagens sem compilador de código nativo (JIT ou AOT), tais como Perl, Ruby, PHP e Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;&lt;p&gt;&lt;strong&gt;Robusta&lt;/strong&gt; – James Gosling afirma que “a linguagem de programação Java foi projetada para criar programas altamente confiáveis, efetua uma extensiva verificação em tempo de compilação, seguida por um segundo nível de verificação durante a execução e suas características induzem bons hábitos de programação.” Ademais, analisando o desenvolvimento consistente da tecnologia Java ao longo dessas quase duas décadas passadas desde sua criação, podemos confirmar sua evolução constante, incorporando sempre o que há de mais moderno na tecnologia das linguagens de programação.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Segura&lt;/strong&gt; – De acordo com a &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/tech/index-jsp-136007.html&quot; target=&quot;_blank&quot;&gt;Oracle&lt;/a&gt;, “a tecnologia de segurança de Java inclui um vasto conjunto de APIs, ferramentas e implementações dos mais usados algorítimos de segurança, mecanismos e protocolos. As APIs de segurança de Java se espalham por uma larga área, incluindo criptografia, infraestrutura para chaves públicas, comunicação segura, autenticação e controle de acesso. A tecnologia Java fornece ao desenvolvedor um abrangente &lt;em&gt;framework&lt;/em&gt; de segurança para elaborar aplicativos, bem como dá ao usuário e ao administrador um conjunto de ferramentas para gerenciar seguramente os aplicativos.” A &lt;a href=&quot;http://en.wikipedia.org/wiki/Java_security&quot; target=&quot;_blank&quot;&gt;Wikipedia&lt;/a&gt;, contudo, faz críticas à vulnerabilidade do gerenciador de segurança da plataforma Java aos &lt;em&gt;malwares&lt;/em&gt;, especialmente em &lt;em&gt;plugins&lt;/em&gt; para navegadores Web que executem &lt;em&gt;applets &lt;/em&gt;baixados de &lt;em&gt;sites&lt;/em&gt; públicos, informalmente conhecidos como “&lt;em&gt;Java in the browser&lt;/em&gt;”. O esforço da Oracle para eliminar essas vulnerabilidades, aliás, teria sido responsável pelo atraso no lançamento de Java 8.&lt;/p&gt;
&lt;h2 id=&quot;header2&quot;&gt;Diferenciação entre JVM, JRE e JDK&lt;/h2&gt;&lt;p&gt;No &quot;fantástico mundo de Java&quot; é comum nos depararmos com um cipoal de siglas, a maioria delas começando com a letra &quot;J&quot;. Logo de cara, ao iniciarmos nosso estudo dessa linguagem de programação, somos apresentados às três mais importantes dessas siglas: JVM, JRE e JDK.&lt;/p&gt;&lt;p&gt;A representação gráfica na figura a seguir dá uma ideia geral da sua integração:&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img style=&quot;border: 1px solid #021a40;&quot; alt=&quot;jvm_jre_jdk&quot; src=&quot;http://pontogpp.com.br/wp-content/uploads/2015/02/jvm_jre_jdk.png&quot; width=&quot;586&quot; height=&quot;494&quot;&gt;&lt;/p&gt;
&lt;h3&gt;JVM&lt;/h3&gt;&lt;p&gt;A sigla JVM significa &quot;&lt;em&gt;Java Virtual Machine&lt;/em&gt;&quot;, ou seja, a &lt;em&gt;Máquina Virtual Java&lt;/em&gt;, que, como o próprio nome já indica, é uma &quot;máquina&quot; abstrata, cuja finalidade é prover o ambiente no qual o &lt;em&gt;bytecode&lt;/em&gt; possa ser executado. Podemos conceber a JVM como o motor fundamental do ambiente de execução dos programas Java, cumprindo as seguintes tarefas:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Carregar o código do programa.&lt;/li&gt;
	&lt;li&gt;Verificar a consistência do código.&lt;/li&gt;
	&lt;li&gt;Executar o código.&lt;/li&gt;
	&lt;li&gt;Implementar o ambiente em tempo de execução.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JRE&lt;/h3&gt;&lt;p&gt;JRE, por sua vez, é abreviatura de &quot;&lt;em&gt;Java Runtime Environment&lt;/em&gt;&quot;, que podemos traduzir como &lt;em&gt;Ambiente de Execução Java&lt;/em&gt;. Sendo fisicamente a implementação da JVM, é ele que contém o conjunto de bibliotecas e demais arquivos que serão usados pela JVM durante a execução do programa Java.&lt;/p&gt;
&lt;h3&gt;JDK&lt;/h3&gt;&lt;p&gt;O JDK é a sigla de &quot;&lt;em&gt;Java Development Kit&lt;/em&gt;&quot;, ou seja, o &lt;em&gt;kit para desenvolvimento de programas Java&lt;/em&gt;. Como podemos observar na figura acima, contém, além do JRE/JVM, ferramentas para desenvolvimento, incluindo, entre outras, um compilador. Atualmente, ele é apresentado em três versões:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Java ME&lt;/strong&gt; — &lt;em&gt;Java Mobile Edition&lt;/em&gt;: Kit de desenvolvimento para aplicações de dispositivos portáteis, tais como celulares, por exemplo.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Java SE&lt;/strong&gt; — &lt;em&gt;Java Standard Edition&lt;/em&gt;: Utilizado para desenvolvimento &lt;em&gt;Desktop&lt;/em&gt; e Cliente/Servidor.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Java EE&lt;/strong&gt; — &lt;em&gt;Java Enterprise Edition&lt;/em&gt;: Desenvolvimento de aplicativos de uso corporativo. Esclarecendo um pouco melhor: as aplicações Web atuais possuem regras de negócio bem complicadas. Além dessas regras, conhecidas como requisitos funcionais, existem outros requisitos a serem atingidos através da infraestrutura do aplicativo, tais como persistência em banco de dados, transação, acesso remoto, &lt;em&gt;web services&lt;/em&gt;, gerenciamento de &lt;em&gt;threads&lt;/em&gt;, gerenciamento de conexões HTTP, cache de objetos, gerenciamento da sessão Web, balanceamento de carga e outros mais, chamados requisitos não-funcionais. É exatamente para dar suporte à implementação desses requisitos que foi desenvolvida a Java EE, que consiste de uma série de especificações bem detalhadas, dando uma receita de como deve ser implementado um &lt;em&gt;software&lt;/em&gt; que execute cada um desses serviços de infraestrutura.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;header3&quot;&gt;Qual versão do JDK instalar?&lt;/h2&gt;&lt;p&gt;Para estudar a linguagem de programação Java, portanto, a primeira coisa que precisaremos providenciar é a instalação do JDK no nosso computador.&lt;/p&gt;&lt;p&gt;Para um aprendizado básico da linguagem, vamos utilizar a versão SE de Java 8, disponibilizada pela &lt;a href=&quot;http://www.oracle.com/index.html&quot; target=&quot;_blank&quot;&gt;Oracle&lt;/a&gt;, que você encontra &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html?ssSourceSiteId=otnpt&quot; target=&quot;_blank&quot;&gt;neste repositório&lt;/a&gt;. Abaixo, estão os links de tutoriais com um passo-a-passo para sua instalação nos principais sistemas operacionais em uso atualmente.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;/programacao/instalacao-do-jdk-no-linux/&quot;&gt;Instalação no Linux&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/programacao/instalacao-do-jdk-no-mac-os-x/&quot;&gt;Instalação no Mac OS X&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;/programacao/instalacao-do-jdk-no-windows/&quot;&gt;Instalação no Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;header4&quot;&gt;O que é um IDE?&lt;/h2&gt;&lt;p&gt;Segundo a &lt;a href=&quot;http://pt.wikipedia.org/wiki/Ambiente_de_desenvolvimento_integrado&quot; target=&quot;_blank&quot;&gt;Wikipédia&lt;/a&gt; um &quot;IDE, do inglês &lt;em&gt;Integrated Development Environment&lt;/em&gt; ou Ambiente Integrado de Desenvolvimento, é um programa de computador que reúne características e ferramentas de apoio ao desenvolvimento de software com o objetivo de agilizar este processo.&quot;&lt;/p&gt;&lt;p&gt;Geralmente os IDE facilitam a técnica de RAD (de &lt;em&gt;Rapid Application Development&lt;/em&gt;, ou &quot;Desenvolvimento Rápido de Aplicativos&quot;), que visa a maior produtividade dos desenvolvedores.&lt;/p&gt;
&lt;h3&gt;O IDE Eclipse&lt;/h3&gt;&lt;p&gt;Este fantástico IDE é hoje o mais utilizado no mundo todo para desenvolvimento em Java, embora suporte também outras linguagens tais como C/C++, PHP e Python, entre outras, mediante a instalação de &lt;em&gt;plugins&lt;/em&gt; (módulos de extensão). Hoje em dia, também é muito usada para desenvolvimento de programas para a plataforma Android.&lt;/p&gt;&lt;p&gt;Tendo em vista a sua enorme utilização pela indústria de software, além da sua inquestionável flexibilidade e seus recursos avançados para desenvolvimento, será este o IDE que iremos utilizar na maior parte do Curso de Java do Ponto G++. Não poderia, contudo, deixar de mencionar dois outros IDEs excelentes para desenvolvimento Java: o NetBeans, distribuído pela própria Oracle, e o IntelliJIDEA, este último a única versão comercial (paga) dos três, embora exista uma versão &lt;em&gt;open-source&lt;/em&gt; muito boa, mantida pela comunidade.&lt;/p&gt;
&lt;h2 id=&quot;header5&quot;&gt;Instalação&lt;/h2&gt;&lt;p&gt;Como o IDE Eclipse é desenvolvido em Java, sua instalação, em qualquer plataforma, é a coisa mais simples que existe. Basta baixar o programa do seu &lt;a href=&quot;https://eclipse.org/downloads/&quot; target=&quot;_blank&quot;&gt;site oficial&lt;/a&gt;, conforme a sua plataforma (Windows/Linux/Mac OS X), descompactar o arquivo e iniciar o executável. Crie um atalho para a pasta descompactada a fim de facilitar a utilização do programa e mãos à obra...&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;eclipse_download&quot; src=&quot;http://pontogpp.com.br/wp-content/uploads/2014/11/eclipse_download.png&quot; width=&quot;800&quot; height=&quot;474&quot;&gt;&lt;/p&gt;&lt;p&gt;Não vou abordar aqui detalhes da utilização do IDE Eclipse, pois isso foge ao escopo deste curso. Considerando, contudo, a amplitude da sua utilização, qualquer dúvida poderá ser virtualmente esclarecida na Internet ou na própria documentação oficial. Sugiro que você dedique parte do seu tempo ao estudo do programa, para alcançar o máximo de produtividade.&lt;/p&gt;&lt;p&gt;Irá constatar que este IDE possui realmente recursos extraordinários para facilitar sua vida de desenvolvedor Java, explicando o porquê do seu tremendo sucesso.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;java-logo&quot; src=&quot;http://pontogpp.com.br/wp-content/uploads/2014/11/java-logo.jpg&quot; width=&quot;256&quot; height=&quot;256&quot;&gt;&lt;/p&gt;
	    </description>
      </item>
  </channel> 
</rss>
